{
  // 这两个配置分别表示运行环境和全局变量，在指定的运行环境中会预设一些全局变量
  "env": {
    "browser": true,
    "es2021": true
  },
  // 有些全局变量是业务代码引入的第三方库所声明，这里就需要在globals配置中声明全局变量了
  // "writable"或者 true，表示变量可重写；
  // "readonly"或者false，表示变量不可重写；
  // "off"，表示禁用该全局变量。
  "globals": {
    // 不可重写
    "$": false,
    "jQuery": false
  },
  // extends 相当于继承另外一份 ESLint 配置，可以配置为一个字符串，也可以配置成一个字符串数组
  "extends": [
    // 第1种情况
    "eslint:recommended",
    // 第2种情况，一般配置的时候可以省略 `eslint-config`
    // 'standard',
    // 第3种情况，可以省略包名中的 `eslint-plugin`
    // 格式一般为: `plugin:${pluginName}/${configName}`
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    // 1. 接入 prettier 的规则
    "prettier",
    "plugin:prettier/recommended"
  ],
  "parser": "@typescript-eslint/parser",
  // 解析器选项
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  // 需要我们指定 parser 选项为@typescript-eslint/parser才能兼容 TS 的解析
  // 2. 加入 prettier 的 eslint 插件
  "plugins": ["react", "@typescript-eslint", "prettier"],
  "rules": {
    // 3. 注意要加上这一句，开启 prettier 自动修复的功能
    "prettier/prettier": "error",
    // key 为规则名，value 配置内容
    "no-cond-assign": ["error", "always"],
    // 开启一些 TS 规则
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-explicit-any": "warn"
  }
}
